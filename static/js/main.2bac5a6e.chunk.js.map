{"version":3,"sources":["util/Spotify.js","Components/SearchBar/SearchBar.js","Components/Track/Track.js","Components/TrackList/TrackList.js","Components/SearchResults/SearchResults.js","Components/Playlist/Playlist.js","App.js","reportWebVitals.js","index.js"],"names":["accessToken","SearchBar","props","state","term","search","bind","handleTermChange","this","onSearch","event","setState","target","value","className","placeholder","onChange","onClick","React","Component","Track","addTrack","removeTrack","isRemoval","onAdd","track","onRemove","name","artist","album","renderAction","TrackList","tracks","map","id","SearchResults","searchResults","Playlist","handleNameChange","onNameChange","defaultValue","playlistTracks","onSave","Spotify","getAccessToken","accessTokenMatch","window","location","href","match","expiresInMatch","expiresIn","Number","setTimeout","history","pushState","accessUrl","serch","fetch","headers","Authorization","then","response","json","jsonResponse","items","artists","uri","savePlaylist","trackUris","length","userId","method","body","JSON","stringify","response_1","jsonResponse_1","playlistId","uris","App","playlistName","updatePlaylistName","find","savedTrack","push","filter","currentTrack","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2bac5a6e.chunk.js","sourcesContent":["const clientId = '11b518e4920b4371902130855ed0b8a5';\r\nconst redirectUri = \"http://oradocaj.github.io/jammming/\" //\"http://localhost:3000/\";\r\nlet accessToken;\r\n\r\nconst Spotify = {\r\n    getAccessToken() {\r\n        if (accessToken) {\r\n            return accessToken;\r\n        }\r\n\r\n        // check for access token match\r\n        const accessTokenMatch = window.location.href.match(/access_token=([^&]*)/);\r\n        const expiresInMatch = window.location.href.match(/expires_in=([^&]*)/);\r\n\r\n        if (accessTokenMatch && expiresInMatch) {\r\n            accessToken = accessTokenMatch[1];\r\n            const expiresIn = Number(expiresInMatch[1]);\r\n            // This clears the parameters, allowing us to grab a new access token when it expires.\r\n            window.setTimeout(() => accessToken = '', expiresIn * 1000);\r\n            window.history.pushState('Access Token', null, '/');\r\n            return accessToken;\r\n        } else {\r\n            const accessUrl = `https://accounts.spotify.com/authorize?client_id=${clientId}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectUri}`;\r\n            window.location = accessUrl;\r\n        }\r\n    },\r\n\r\n    /*async search(term) {\r\n        const accessToken = Spotify.getAccessToken();\r\n        const response = await fetch(`https://api.spotify.com/v1/search?type=track&q=${term}`, {\r\n            headers: {\r\n                Authorization: `Bearer ${accessToken}`\r\n            }\r\n        });\r\n        const jsonResponse = await response.json();\r\n        if (!jsonResponse) {\r\n            return [];\r\n        } else {\r\n            return jsonResponse.tracks.items.map(track => ({\r\n                id: track.id,\r\n                name: track.name,\r\n                artist: track.artists[0].name,\r\n                album: track.album.name,\r\n                uri: track.uri\r\n            }));\r\n        }\r\n    },*/\r\n\r\n    serch(term) {\r\n        const accessToken = Spotify.getAccessToken();\r\n        return fetch(`https://api.spotify.com/v1/search?type=track&q=${term}`, {\r\n            headers: {\r\n                Authorization: `Bearer ${accessToken}`\r\n            }\r\n        }).then((response) => {\r\n            return response.json();\r\n        }).then((jsonResponse) => {\r\n            if (!jsonResponse) {\r\n                return [];\r\n            } else {\r\n                return jsonResponse.tracks.items.map(track => ({\r\n                    id: track.id,\r\n                    name: track.name,\r\n                    artist: track.artists[0].name,\r\n                    album: track.album.name,\r\n                    uri: track.uri\r\n                }));\r\n            }\r\n        })        \r\n    },\r\n\r\n    async savePlaylist(name, trackUris) {\r\n        if(!name || !trackUris.length) {\r\n            return;\r\n        }\r\n\r\n        const accessToken = Spotify.getAccessToken();\r\n        const headers = { Authorization: `Bearer ${accessToken}` };\r\n        let userId;\r\n\r\n        const response = await fetch('https://api.spotify.com/v1/me', { headers: headers }\r\n        );\r\n        const jsonResponse = await response.json();\r\n        userId = jsonResponse.id;\r\n        const response_1 = await fetch(`https://api.spotify.com/v1/users/${userId}/playlists`,\r\n            {\r\n                headers: headers,\r\n                method: 'POST',\r\n                body: JSON.stringify({ name: name })\r\n            });\r\n        const jsonResponse_1 = await response_1.json();\r\n        const playlistId = jsonResponse_1.id;\r\n        return await fetch(`https://api.spotify.com/v1/users/${userId}/playlists/${playlistId}/tracks`, {\r\n            headers: headers,\r\n            method: 'POST',\r\n            body: JSON.stringify({ uris: trackUris })\r\n        });\r\n    }\r\n\r\n};\r\n\r\nexport default Spotify;","import React from 'react';\r\n\r\nimport './SearchBar.css';\r\n\r\nclass SearchBar extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            term: ''\r\n        };\r\n\r\n        this.search = this.search.bind(this);\r\n        this.handleTermChange = this.handleTermChange.bind(this);\r\n    }\r\n\r\n    search() {\r\n        this.props.onSearch(this.state.term);\r\n    }\r\n\r\n    handleTermChange(event) {\r\n        this.setState({ term: event.target.value });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"SearchBar\">\r\n                <input placeholder=\"Enter A Song, Album, or Artist\" onChange={this.handleTermChange}/>\r\n                <button className=\"SearchButton\" onClick={this.search}>SEARCH</button>\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default SearchBar;\r\n","import React from 'react';\r\n\r\nimport './Track.css';\r\n\r\nclass Track extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.addTrack = this.addTrack.bind(this);\r\n        this.removeTrack = this.removeTrack.bind(this);\r\n    }\r\n    \r\n    renderAction() {\r\n        if (this.props.isRemoval) {\r\n            return <button className='Track-action' onClick={this.removeTrack}>-</button>\r\n        } else {\r\n            return <button className='Track-action' onClick={this.addTrack}>+</button>\r\n        }\r\n    }\r\n\r\n    addTrack() {\r\n        this.props.onAdd(this.props.track);\r\n    }\r\n\r\n    removeTrack() {\r\n        this.props.onRemove(this.props.track);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"Track\">\r\n                <div className=\"Track-information\">\r\n                    <h3>{this.props.track.name}</h3>\r\n                    <p>{this.props.track.artist} | {this.props.track.album}</p>\r\n                </div>\r\n                {this.renderAction()}\r\n            </div>\r\n        );\r\n    }\r\n    \r\n};\r\n\r\nexport default Track;\r\n","import React from 'react';\r\n\r\nimport '../Track/Track.css';\r\nimport './TrackList.css';\r\nimport Track from '../Track/Track';\r\n\r\nclass TrackList extends React.Component {\r\n    render() {\r\n        return (\r\n            <div className=\"TrackList\">                \r\n                {\r\n                    this.props.tracks.map(track => {\r\n                        return <Track track={track}\r\n                                      key={track.id}\r\n                                      onAdd={this.props.onAdd}\r\n                                      onRemove={this.props.onRemove}\r\n                                      isRemoval={this.props.isRemoval} />\r\n                    })\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n};\r\n\r\nexport default TrackList;\r\n","import React from 'react';\r\n\r\nimport './SearchResults.css';\r\nimport '../TrackList/TrackList.css';\r\nimport TrackList from '../TrackList/TrackList';\r\n\r\nclass SearchResults extends React.Component {\r\n    render() {\r\n        return (\r\n            <div className=\"SearchResults\">\r\n                <h2>Results</h2>\r\n                <TrackList tracks={this.props.searchResults}\r\n                           onAdd={this.props.onAdd}\r\n                           isRemoval={false} />\r\n            </div>\r\n        );\r\n    }\r\n};\r\n\r\nexport default SearchResults;\r\n","import React from 'react';\r\n\r\nimport './Playlist.css';\r\nimport '../Tracklist/Tracklist.css';\r\nimport TrackList from '../TrackList/TrackList';\r\n\r\nclass Playlist extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.handleNameChange = this.handleNameChange.bind(this);\r\n    }\r\n\r\n    handleNameChange(event) {\r\n        this.props.onNameChange(event.target.value);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"Playlist\">\r\n                <input defaultValue={\"New Playlist\"} onChange={this.handleNameChange}/>\r\n                <TrackList tracks={this.props.playlistTracks}\r\n                           onRemove={this.props.onRemove}\r\n                           isRemoval={true} />\r\n                <button className=\"Playlist-save\" onClick={this.props.onSave}>SAVE TO SPOTIFY</button>\r\n            </div>\r\n        );\r\n    }\r\n};\r\n\r\nexport default Playlist;\r\n","import React from 'react';\r\n\r\nimport './App.css';\r\nimport SearchBar from './Components/SearchBar/SearchBar';\r\nimport SearchResults from './Components/SearchResults/SearchResults.js';\r\nimport Playlist from './Components/Playlist/Playlist';\r\n\r\nimport Spotify from './util/Spotify';\r\n\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      searchResults: [],\r\n      playlistName: 'My Playlist',\r\n      playlistTracks: []\r\n    };\r\n\r\n    this.addTrack = this.addTrack.bind(this);\r\n    this.removeTrack = this.removeTrack.bind(this);\r\n    this.updatePlaylistName = this.updatePlaylistName.bind(this);\r\n    this.savePlaylist = this.savePlaylist.bind(this);\r\n    this.search = this.search.bind(this);\r\n  }\r\n  \r\n  addTrack(track) {\r\n    if (this.state.playlistTracks.find(savedTrack => \r\n      savedTrack.id === track.id)) {\r\n        return;\r\n    }\r\n\r\n    this.state.playlistTracks.push(track);\r\n\r\n    this.setState({ playlistTracks: this.state.playlistTracks })\r\n  }\r\n\r\n  removeTrack(track) {\r\n    let playlistTracks = this.state.playlistTracks.filter(currentTrack => currentTrack.id !== track.id );\r\n    this.setState({playlistTracks: playlistTracks});\r\n  }\r\n\r\n  updatePlaylistName(name) {\r\n\r\n    this.setState({playlistName: name});\r\n  }\r\n\r\n  savePlaylist() {\r\n    //alert(\"This method is linked to the button correctly!\")\r\n    const trackUris = this.state.playlistTracks.map(track => track.uri);\r\n    Spotify.savePlaylist(this.state.playlistName, trackUris).then(() => {\r\n      this.setState({\r\n        playlistName: 'New Playlist',\r\n        playlistTracks: []\r\n      })\r\n    })\r\n  }\r\n\r\n  search(term) {\r\n    //console.log(term);\r\n    Spotify.search(term).then(searchResults => {\r\n      this.setState({searchResults: searchResults})\r\n    })\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h1>Ja<span className=\"highlight\">mmm</span>ing</h1>\r\n        <div className=\"App\">\r\n          <SearchBar onSearch={this.search} />\r\n          <div className=\"App-playlist\">\r\n            <SearchResults searchResults={this.state.searchResults}\r\n                           onAdd={this.addTrack} />                           \r\n            <Playlist playlistName={this.state.playlistName}\r\n                      playlistTracks={this.state.playlistTracks}\r\n                      onRemove={this.removeTrack}\r\n                      onNameChange={this.updatePlaylistName}\r\n                      onSave={this.savePlaylist} />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n};\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}